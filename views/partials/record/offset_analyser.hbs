<script>

    const offset_analyser = (function(){
        
        'use strict';

        let analysisInitialised = -1;
        let audioPlaying = false;
        const sequenceFrequencies = [260, 330, 400, 520];
        const detectedFrequenciesSequence = [];
        let firstDetection;

        let audioContext;
        let testChimesSource;
        
        let analyser;
        let bufferLength;
        let dataArray;
        let initialGainValue = 1.5;

        let streamForAnalysis;
        let nodes = {};

        const virtualElement = document.createElement('div');

        function getFrequencyValue(frequency) {
            const nyquist = audioContext.sampleRate / 2;
            const index = Math.round(frequency / nyquist * bufferLength);
            return dataArray[index];
        }

        function generateTones(){
            
            console.log('Generating tones');

            var g = audioContext.createGain();
            var currentTime = audioContext.currentTime;

            sequenceFrequencies.forEach(function(frequency, idx){
                console.log(frequency);
                var o = audioContext.createOscillator();
                o.type = "square";
                o.frequency.value = frequency;
                o.connect(g);
                g.connect(audioContext.destination);
                o.start( currentTime + (idx * 0.25) );
                o.stop( currentTime + ( (idx + 1) * 0.25 ) );
            });

            setTimeout(function(){

                audioPlaying = false;
                
                console.log('detectedFrequenciesSequence:', detectedFrequenciesSequence);
                
                const successfulAnalysis = (detectedFrequenciesSequence[0] === 0 && detectedFrequenciesSequence[1] === 1 && detectedFrequenciesSequence[2] === 2 && detectedFrequenciesSequence[3] === 3);
                
                detectedFrequenciesSequence.length = 0;

                virtualElement.dispatchEvent( new CustomEvent('analysed', { bubbles: false, detail: successfulAnalysis ? firstDetection - analysisInitialised : false } ) );

            }, 1000);

        }

        function enableAudioContext(audioSource){
            
            if(!audioContext){
                
                audioContext = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.oAudioContext)();
                
                console.log('base latency:', audioContext.baseLatency);
                console.log('output latency:', audioContext.outputLatency);

                testChimesSource = new Audio();
                testChimesSource.src = audioSource || "test_chimes.wav";
                testChimesSource.addEventListener('ended', function(){

                    setTimeout(function(){

                        audioPlaying = false;
                        
                        console.log('detectedFrequenciesSequence:', detectedFrequenciesSequence);
                        
                        const successfulAnalysis = (detectedFrequenciesSequence[0] === 0 && detectedFrequenciesSequence[1] === 1 && detectedFrequenciesSequence[2] === 2 && detectedFrequenciesSequence[3] === 3);
                        
                        detectedFrequenciesSequence.length = 0;

                        virtualElement.dispatchEvent( new CustomEvent('analysed', { bubbles: false, detail: successfulAnalysis ? firstDetection - analysisInitialised : false } ) );

                    }, 1000);

                }, false);

            }

        }

        function createAnalyserWithOptions(options){

            if(!nodes.analyser){

                options = options || {};
                nodes.length = 0;

                nodes.analyser = audioContext.createAnalyser();
                nodes.analyser.fftSize = options.fftSize || 1024;
                nodes.analyser.smoothingTimeConstant = options.smoothingTimeConstant || 0;

                bufferLength = nodes.analyser.frequencyBinCount;
                dataArray = new Uint8Array(bufferLength);
                nodes.analyser.getByteTimeDomainData(dataArray);

                nodes.gain = audioContext.createGain();
                nodes.gain.gain.value = options.gainValue || initialGainValue;

                nodes.filter = audioContext.createBiquadFilter();
                nodes.filter.type = "lowpass";
                nodes.filter.frequency.value = options.lowPassFilterValue || 1000;

            }

        }

        function setStreamSourceForAnalysis(stream){
            streamForAnalysis = audioContext.createMediaStreamSource(stream);
        }

        function connectSourceToAnalyser(){
            streamForAnalysis.connect(nodes.gain);
            nodes.gain.connect(nodes.filter);
            nodes.filter.connect(nodes.analyser);
        } 

        let count = 0;

        function analyseStream(){            

            if(audioPlaying){

                nodes.analyser.getByteFrequencyData(dataArray);

                let highestIndex = 0;

                const readings = [
                    getFrequencyValue(sequenceFrequencies[0]),
                    getFrequencyValue(sequenceFrequencies[1]),
                    getFrequencyValue(sequenceFrequencies[2]),
                    getFrequencyValue(sequenceFrequencies[3])
                ];

                for(let x = 0; x < readings.length; x += 1){
                    if(readings[x] > readings[highestIndex]){
                        highestIndex = x;
                    }
                }

                const lastItemInArray = detectedFrequenciesSequence[detectedFrequenciesSequence.length - 1];

                if(readings[highestIndex] > 180){

                    if(highestIndex === 0 && detectedFrequenciesSequence.length === 0){

                        firstDetection = performance.now();
                        detectedFrequenciesSequence.push(highestIndex);

                    } else if(highestIndex === lastItemInArray + 1) {

                        detectedFrequenciesSequence.push(highestIndex);

                    }

                }

                requestAnimationFrame(analyseStream);

            }

        }

        function findTheDelayInTheStream(attempts, attempt){

            attempts = attempts || 1;
            attempt = attempt || 1;

            if(attempt > 1){
                nodes.gain.gain.value = nodes.gain.gain.value * 1.25;
            } else {
                nodes.gain.gain.value = initialGainValue;
            }

            if(audioPlaying){

                return Promise.reject('An analysis process is already running');

            } else {
                
                analysisInitialised = performance.now();
                audioPlaying = true;
                generateTones();
                analyseStream();

                return new Promise( function(resolve, reject){

                    virtualElement.addEventListener('analysed', function(e){

                        if(!e.detail && attempt < attempts){

                            setTimeout(function(){
                                resolve(findTheDelayInTheStream(attempts, attempt += 1));
                            }, 1500);

                        } else {
                            resolve(e.detail);
                        }

                    }, {once : true});

                });

            }


        }

        return { 
            enable : enableAudioContext,
            create : createAnalyserWithOptions,
            src : setStreamSourceForAnalysis,
            connect : connectSourceToAnalyser,
            find : findTheDelayInTheStream
        };

    })();

</script>