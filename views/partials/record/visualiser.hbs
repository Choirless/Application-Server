<script>

    var visualiser = (function(){

        'use strict';

        var outputElement;
        var ctx;
        
        var bars = 16;
        var barValues;

        var audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        var analyser = audioCtx.createAnalyser();
        var audioSrc;
        var dataArray;
        var bufferLength;

        var rendering = false;

        var WIDTH;
        var HEIGHT;

        function configureVisualiser(options){

            console.log('configureVisualiser options:', options);

            if(options.element){
                outputElement = options.element;
                ctx = outputElement.getContext('2d');
                ctx.fillStyle = 'blue';
                WIDTH = outputElement.width = outputElement.offsetWidth;
                HEIGHT = outputElement.height = outputElement.offsetHeight;
            }

            if(options.bars){
                bars = options.bars;
            }
            
            if(options.src){
                audioSrc = audioCtx.createMediaStreamSource(options.src);
            }

            analyser.fftSize = 1024;
            analyser.smoothingTimeConstant = 1;
            bufferLength = analyser.frequencyBinCount
            audioSrc.connect(analyser);

        }

        function render(){

            var barWidth = WIDTH / bars;
            var barHeight;
            var x = 0;

            ctx.clearRect(0, 0, WIDTH, HEIGHT);
            ctx.fillStyle = 'white';

            for(var i = 0; i < barValues.length; i++) {
                barHeight = (barValues[i] - 128) * 15;

                ctx.fillRect(x,  HEIGHT - barHeight, barWidth, barHeight);

                x += barWidth + 1;
            }

            if(rendering){
                requestAnimationFrame(analyse);
            }

        }

        function analyse(){
            dataArray = new Uint8Array(analyser.frequencyBinCount);
            analyser.getByteTimeDomainData(dataArray);

            var aggregateValues = [];
            var groupValues = [];

            for(var i = 0; i < dataArray.length; i++) {
                
                if(groupValues.length <= dataArray.length / bars){
                    groupValues.push(dataArray[i]);
                } else {
                    aggregateValues.push(groupValues.reduce((a, b) => a + b, 0));
                    groupValues.length = 0;
                }

            }

            barValues = aggregateValues.map(value => value = value / (dataArray.length / bars));

            requestAnimationFrame(render);
        }

        function startVisualising(){
            console.log('startVisualising');
            rendering = true;
            requestAnimationFrame(analyse);
        }

        function stopVisualising(){
            console.log('stopVisualising');
            rendering = false;
        }

        return {
            configure : configureVisualiser,
            start : startVisualising,
            stop : stopVisualising
        };

    })();

</script>