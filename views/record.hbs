<div id="videos">

    <div class="half" id="lead" data-videoloaded="false">
        <video preload src="" ></video>

        <div id="lead-loading" class="video-dialog">
            <h2>Loading Lead Video</h2>
            <div id="progress">
                <span id="indicator"></span>
            </div>
        </div>

        <h3>Lead</h3>
    </div>

    <div class="half" id="performance" data-videoloaded="false">
        <video muted></video>
        <video id="recorded" data-active="false"></video>
        <div id="activate-cameras" class="video-dialog">
            <h2>Camera + Microphone Access</h2>
            <p>To record your performance, you'll need to let Choirless use your camera and microphone.</p>
            <button class="cta-button" id="enableCapture">Enable Camera + Microphone</button>
            <p>(Don't worry, we won't record or save anything until you tell us to).</p>
        </div>

        <h3>You</h3>
    </div>

</div>

<div id="controls" data-active="false">
    <button class="cta-button listen" data-active="false">Listen To Lead</button>
    <button class="cta-button record" data-active="false">Record Performance</button>
    <button class="cta-button playback" data-active="false">Replay Performance</button>
    <button class="cta-button save"  data-active="false">Save Performance</button>
</div>

<script>

    (function(){

        'use strict';

        var playingLead = false;
        var recording = false;

        var showingPerformance = false;

        var leadView = document.querySelector('.half#lead');
        var performanceView = document.querySelector('.half#performance');;

        var leadVideo = leadView.querySelector('video');
        var performanceVideo = performanceView.querySelector('video');
        var recordedVideo = performanceView.querySelector('video#recorded');

        const progressIndicator = leadView.querySelector('#indicator');

        var enableCaptureBtn = performanceView.querySelector('#enableCapture')

        var listenBtn = document.querySelector('#controls button.listen');
        var recordBtn = document.querySelector('#controls button.record');
        var playbackBtn = document.querySelector('#controls button.playback');
        var saveBtn = document.querySelector('#controls button.save');

        var performanceData = [];
        var performanceStream;
        var mR;

        listenBtn.addEventListener('click', function(){

            if(!playingLead){
                playingLead = true;
                leadVideo.currentTime = 0;
                leadVideo.play();
                listenBtn.textContent = "Stop Lead";
            } else {
                leadVideo.pause();
                playingLead = false;
                leadVideo.currentTime = 0;
                listenBtn.textContent = "Listen To Lead";
            }

        }, false);

        recordBtn.addEventListener('click', function(){

            if(!recording){

                recording = true;
                
                recordBtn.textContent = "Stop Recording";
                
                listenBtn.dataset.active = "false";
                recordedVideo.dataset.active = "false";
                performanceVideo.dataset.active = "true";
                playbackBtn.dataset.active = "false";
                saveBtn.dataset.active = "false";

                performanceData.length = 0;

                recordedVideo.pause();
                leadVideo.currentTime = 0;
                leadVideo.play();

                mR = new MediaRecorder(performanceStream);

                mR.ondataavailable = function(e){
                    performanceData.push(e.data);
                }

                mR.onstop = function(e){
                    console.log(e);
                    console.log(performanceData);
                }

                mR.start(50);

            } else {

                recording = false;
                recordBtn.textContent = "Re-Record Performance";

                leadVideo.pause();
                leadVideo.currentTime = 0;

                mR.stop();

                performanceVideo.dataset.active = "false";

                var blob = new Blob(performanceData, {
                    type: "video/webm"
                });

                try{
                    const vidURL = window.URL.createObjectURL(blob);
                    recordedVideo.src = vidURL;
                } catch(err){

                    console.log('Unable to createObjectURL for stream. Setting srcObject to stream instead...');
                    recordedVideo.srcObject = stream;

                }

                recordedVideo.dataset.active = "true";
                recordedVideo.currentTime = 0;

                playbackBtn.dataset.active = "true";
                saveBtn.dataset.active = "true";

            }


        }, false);

        playbackBtn.addEventListener('click', function(){
            
            if(!showingPerformance){
                showingPerformance = true;
                
                playbackBtn.textContent = "Stop Playback";

                recordedVideo.currentTime = 0;
                leadVideo.currentTime = 0;

                recordedVideo.play()
                leadVideo.play();

            } else {
                
                showingPerformance = false;
                
                playbackBtn.textContent = "Replay Performance";

                recordedVideo.pause()
                leadVideo.pause();

                recordedVideo.currentTime = 0;
                leadVideo.currentTime = 0;

            }

        }, false);

        leadVideo.addEventListener('ended', function(){
            playingLead = false;
            leadVideo.currentTime = 0;
            listenBtn.textContent = "Listen to lead";

            if(showingPerformance && recordedVideo.paused === true){
                showingPerformance = false;
                playbackBtn.textContent = "Replay Performance";
            }

        }, false);

        recordedVideo.addEventListener('ended', function(){

            if(showingPerformance && leadVideo.paused === true){
                showingPerformance = false;
                playbackBtn.textContent = "Replay Performance";
            }

        }, false);

        enableCaptureBtn.addEventListener('click', function(){

            navigator.mediaDevices.enumerateDevices()
                .then( function(listOfDevices){

                    var constraints = { video: {width: { min: 640, ideal: 1280, max: 1280 }, height: { min: 400, ideal: 720 } },  audio: true };

                    navigator.mediaDevices.getUserMedia(constraints)
                        .then(function(stream) {

                            performanceStream = stream.clone();

                            try{
                                const vidURL = window.URL.createObjectURL(stream);
                                performanceVideo.src = vidURL;
                            } catch(err){

                                console.log('Unable to createObjectURL for stream. Setting srcObject to stream instead...');
                                performanceVideo.srcObject = stream;

                            }

                            setTimeout(function(){

                                console.log('Video is playing', !performanceVideo.paused);

                                if(performanceVideo.paused){
                                    performanceVideo.play();
                                    performanceView.dataset.videoloaded = "true";

                                    if(leadVideo.readyState === 4){
                                        recordBtn.dataset.active = "true";
                                    }

                                }

                            }, 1000);

                        })
                    ;

                })
            ;

        }, false);

        var req = new XMLHttpRequest();
        req.open('GET', '/assets/videos/guitar.mp4', true);
        req.responseType = 'blob';

        req.onload = function() {

            if (this.status === 200) {
                leadVideo.src = window.URL.createObjectURL(this.response);
                leadView.dataset.videoloaded = "true";
                listenBtn.dataset.active = "true";

                if(performanceVideo.readyState === 4){
                    recordBtn.dataset.active = "true";
                }

            }

        }

        req.onerror = function(err) {
            // Error
            console.log(err);
        }

        req.onprogress = function(e){
            console.log(e);
            progressIndicator.style.width = (e.loaded / e.total) * 100 + "%";
        }

        req.send();

    }());


</script>