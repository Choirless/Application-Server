<div id="videos" data-leadrecording="{{#ifEquals this.partName "Lead"}}true{{else}}false{{/ifEquals}}">

    {{#ifNotEquals this.partName "Lead"}}

    <div class="half" id="lead" data-videoloaded="false">

        <!--<div class="videoContainer">

            <video preload src="" ></video>

            <div id="lead-loading" class="video-dialog">
                <h2>Loading Video</h2>
                <div class="progress">
                    <span class="indicator"></span>
                </div>
            </div>

        </div>-->

        <button class="cta-button white" id="otherPerformancesTrigger">See Other Performances</button>

        <h3>Lead</h3>

        <div class="modal" data-active="false" id="performanceSelector">
            <div class="container">
                <div class="content">
                    <h2>See other performances</h2> <span id="selectedCount">1/4</span>

                    <ul id="performances-list">
                        <!--<li class="heading">Lead</li>
                        <li><a>Sean M. Tracey</a><button class="cta-button green">Default</button></li>-->

                    </ul>

                    <div class="side-by-side">
                        <button type="button" class="cta-button red cancel">Cancel</button>
                        <button type="submit" class="cta-button light-blue">Load Videos</button>
                    </div>

                </div>
            </div>
        </div>
    </div>

    {{/ifNotEquals}}

    <div class="half inverse" id="performance" data-videoloaded="false">
        <video muted></video>
        <video id="recorded" data-active="false"></video>
        <div id="activate-cameras" class="video-dialog" data-active="true">
            <h2>Camera + Microphone Access</h2>
            <p>To record your performance, you'll need to let Choirless use your camera and microphone.</p>
            <button class="cta-button" id="enableCapture">Enable Camera + Microphone</button>
            <p>(Don't worry, we won't record or save anything until you tell us to).</p>
        </div>

        <div id="calibrate-stream" class="video-dialog" data-active="false">
            <h2>Calibrate Inputs</h2>
            <p>We need to calibrate your inputs</p>
            <p><strong>Please remove any headphones you have attached to your device and unmute your speakers.</strong></p>
            <button class="cta-button black" id="beginCalibration">Calibrate Inputs</button>
        </div>

        <div id="visualiser" data-active="true"></div>

        <h3>You</h3>
    </div>

</div>

<div id="controls" data-active="true">
    {{#ifNotEquals this.partName "Lead"}}<button class="cta-button listen" data-active="false">Listen To Lead</button>{{/ifNotEquals}}
    <button class="cta-button record" data-active="false">Record Performance</button>
    <button class="cta-button playback" data-active="false">Replay Performance</button>
    <button class="cta-button save"  data-active="false">Save Performance</button>
</div>

<div id="uploadDialog" class="global-dialog" data-active="false">
    <div class="dialog-content">
        <h3 id="heading">Saving performance</h3>
        <p id="message">Sending your performance to the Choirless servers.<br/><br/>Please don't leave this page until the upload has finished.</p>
        <div class="progress inverted" data-active="true">
            <span class="indicator inverted"></span>
        </div>
        <a class="cta-button" id="action" data-active="false" href="/dashboard/choir/{{choirId}}/song/{{songId}}">OK</a>
    </div>
</div>

{{> record/offset_analyser }}
{{> record/visualiser }}

<div id="safariWarning" class="global-dialog" data-active="false">
    <div class="dialog-content">
        <h3 id="heading">Hello, Apple Fan!</h3>
        <p>We're sorry, but iOS devices and Safari on Mac do not have the advanced technologies that Choirless uses to record songs.</p>
        <p>That said, Choirless works fantastically in Chrome, Firefox, and Edge on Mac, Windows, Linux, and Android devices. If you open up the link in one of those browsers, everything (should) be great.</p>
        <p>In the meantime, you can still use your Choirless account to manage your members and watch recordings.</p>
        <button class="cta-button black">OK</button>
    </div>
</div>	

<script>

    (function(){

        'use strict';

        const safariWarning = document.querySelector('#safariWarning');
        const okBtn = safariWarning.querySelector('button');

        var ua = navigator.userAgent.toLowerCase(); 
        if (ua.indexOf('safari') !== -1) { 
            if (ua.indexOf('chrome') > -1) {
            } else {
                safariWarning.dataset.active = "true";
            }
        }

        okBtn.addEventListener('click', function(){
            if(window.history){
                window.history.back();
            } else {
                window.location = "/dashboard";
            }
        });


    }());
</script>

<script>

    (function(){

        'use strict';

        const isLeadRecording = document.querySelector('#videos').dataset.leadrecording === "true";

        var choirId = "{{choirId}}";
        var songId = "{{songId}}";

        var playingLead = false;
        var recording = false;

        var showingPerformance = false;

        var leadView = isLeadRecording ? null : document.querySelector('.half#lead');
        var leadVideo = isLeadRecording ? null : leadView.querySelector('video');
        var downloadProgressIndicator = isLeadRecording ? null : leadView.querySelector('.indicator');
        var moreVideosTrigger = isLeadRecording ? null : leadView.querySelector('button#otherPerformancesTrigger');
        var otherPerformancesModal = isLeadRecording ? null : leadView.querySelector('.modal');
        var selectedPerformancesCountDisplay = isLeadRecording ? null : leadView.querySelector('span#selectedCount');
        var MAX_RECORDED_PERFORMANCES = 4;

        var performanceView = document.querySelector('.half#performance');;
        var performanceVideo = performanceView.querySelector('video');
        var recordedVideo = performanceView.querySelector('video#recorded');

        var activateCameraDialog = document.querySelector('#activate-cameras');
        var enableCaptureBtn = activateCameraDialog.querySelector('#enableCapture');

        var calibrateInputsDialog = document.querySelector('#calibrate-stream');
        var calibrateInputsBtn = calibrateInputsDialog.querySelector('#beginCalibration');
        var offsetCalibrated = false;
        var streamOffset = 0;
        var reportedOffset = 0;

        var listenBtn = isLeadRecording ? null : document.querySelector('#controls button.listen');
        var recordBtn = document.querySelector('#controls button.record');
        var playbackBtn = document.querySelector('#controls button.playback');
        var saveBtn = document.querySelector('#controls button.save');

        var uploadDialog = document.querySelector('#uploadDialog');
        var uploadProgressIndicator = uploadDialog.querySelector('.indicator');

        var performanceData = [];
        var performanceStream;
        var streamWidth;
        var streamHeight;
        var mR;

        var visualiserElement = document.body.querySelector('div#visualiser');

        function download(chunks) {

            var blob = new Blob(chunks, {
                type: "video/webm"
            });

            var url = URL.createObjectURL(blob);
            var a = document.createElement("a");

            document.body.appendChild(a);

            a.style = "display: none";
            a.href = url;
            a.download = "test.webm";
            a.click();

            window.URL.revokeObjectURL(url);

        }
        
        var recordedVideos = (function(){

            function playTheRecordedVideos(){

                Array.from(leadView.querySelectorAll('video')).forEach(function(video){
                    video.currentTime = Number(video.dataset.offset / 1000) || 0;
                    video.play();
                });

                listenBtn.textContent = "Stop Lead";

            }

            function pauseTheRecordedVideos(){

                Array.from(leadView.querySelectorAll('video')).forEach(function(video){
                    video.currentTime = Number(video.dataset.offset / 1000) || 0;
                    video.pause();
                });

                listenBtn.textContent = "Listen To Lead";

            }

            function loadARecordedVideo(partId){

                /*<div class="videoContainer">

                    <video preload src="" ></video>

                    <div id="lead-loading" class="video-dialog">
                        <h2>Loading Video</h2>
                        <div class="progress">
                            <span class="indicator"></span>
                        </div>
                    </div>

                </div>*/

                listenBtn.dataset.active = "false";
                document.body.dataset.performances = document.body.dataset.performances ? Number(document.body.dataset.performances) + 1 : "1";

                var videoURL = `/performance/video/${choirId}+${songId}+${partId}.webm`

                var contentContainer = document.createElement('div');
                var videoElement = document.createElement('video');
                var loadingContainer = document.createElement('div');
                var loadingTitle = document.createElement('h2');
                var progressElement = document.createElement('div');
                var indicatorElement = document.createElement('span');

                loadingTitle.textContent = "Loading Video";

                contentContainer.dataset.loaded = "false";
                contentContainer.dataset.id = partId;

                contentContainer.classList.add('videoContainer');
                loadingContainer.classList.add('video-dialog');
                progressElement.classList.add('progress');
                indicatorElement.classList.add('indicator');

                contentContainer.appendChild(videoElement);
                loadingContainer.appendChild(loadingTitle);
                progressElement.appendChild(indicatorElement);

                loadingContainer.appendChild(progressElement);

                contentContainer.appendChild(loadingContainer);

                leadView.insertBefore(contentContainer, moreVideosTrigger);

                /*Array.from(leadView.querySelectorAll('video')).forEach(function(video){

                    video.volume = 1 / Number(document.body.dataset.performances);

                });*/

                videoElement.addEventListener('ended', function(){
                    
                    var allVideosHaveFinishedPlayback = checkIfAllOfTheVideosHaveFinishedPlaying();

                    if(allVideosHaveFinishedPlayback && recordedVideo.paused){
                        listenBtn.textContent = "Listen to lead";
                        playingLead = false;
                        
                        if(showingPerformance && recordedVideo.paused === true){
                            showingPerformance = false;
                            playbackBtn.textContent = "Replay Performance";
                        }

                    } else if(allVideosHaveFinishedPlayback){
                        playingLead = false;
                    }

                }, false);

                fetch(videoURL, {
                        method : "HEAD"
                    })
                    .then(function(res){

                        if(res.ok){

                            return {
                                sizeOfFile : Number(res.headers.get('Content-Length')),
                                offset : Number(res.headers.get('X-Choirless-Offset')),
                            };

                        }
                    })
                    .then(function(data){

                        var req = new XMLHttpRequest();
                        req.open('GET', videoURL, true);
                        req.withCredentials = true;
                        req.responseType = 'blob';

                        req.onload = function() {

                            if (this.status === 200) {
                                videoElement.dataset.offset = data.offset;
                                videoElement.src = window.URL.createObjectURL(this.response);
                                contentContainer.dataset.loaded = "true";

                                var readyToGo = checkIfAllOfTheVideosHaveLoaded();

                                if(readyToGo){
                                    listenBtn.dataset.active = "true";
                                    if(offsetCalibrated){
                                        recordBtn.dataset.active = "true";
                                    }
                                }

                            }

                        }

                        req.onerror = function(err) {
                            // Error
                            console.log(err);
                        }

                        req.onprogress = function(e){
                            indicatorElement.style.width = (e.loaded / data.sizeOfFile) * 100 + "%";
                        }

                        req.send();

                    })
                    .catch(function(err){

                        console.log('fetch HEAD err:', err);

                        __global_message.display({
                            content : "Could not retrieve the video. Please check network connection and try again.",
                            type : "error",
                            resetParameters : true
                        });

                        contentContainer.parentNode.removeChild(contentContainer);

                    })

                ;

            }

            function checkIfAllOfTheVideosHaveLoaded(){

                return leadView.querySelectorAll('.videoContainer[data-loaded="false"]').length === 0;

            }

            function checkIfAllOfTheVideosHaveFinishedPlaying(){
                
                var allFinished = true;
                leadView.querySelectorAll('.videoContainer[data-loaded="false"]').forEach(function(video){
                    if(!allFinished){
                        return;
                    } else if(!video.paused){
                        allFinished = false;
                    }
                });

                return allFinished;

            }

            return {
                play : playTheRecordedVideos,
                pause : pauseTheRecordedVideos,
                load : loadARecordedVideo,
                ready : checkIfAllOfTheVideosHaveLoaded,
                finished : checkIfAllOfTheVideosHaveFinishedPlaying
            };

        })();

        window.addEventListener('keyup', function(e){
            console.log(e.keyCode);

            if(e.keyCode === 27 && performanceData.length > 0){
                download(performanceData);
            }

        }, false);

        if(listenBtn){

            listenBtn.addEventListener('click', function(){

                if(!playingLead){
                    playingLead = true;
                    recordedVideos.play();
                } else {
                    playingLead = false;
                    recordedVideos.pause();
                }

            }, false);

        }

        recordBtn.addEventListener('click', function(){

            if(!recording){

                recording = true;
                visualiser.start();

                recordBtn.textContent = "Stop Recording";

                if(listenBtn){
                    listenBtn.dataset.active = "false";
                }

                recordedVideo.dataset.active = "false";
                performanceVideo.dataset.active = "true";
                playbackBtn.dataset.active = "false";
                saveBtn.dataset.active = "false";

                playbackBtn.textContent = "Replay Performance";
                playingLead = false;
                showingPerformance = false;

                performanceData.length = 0;

                recordedVideo.pause();
                recordedVideo.src = "";

                if(!isLeadRecording){
                    recordedVideos.play()
                }

                // Oh Firefox, why you gotta do me like this?
                if(navigator.userAgent.indexOf("Firefox") === -1){
                    mR = new MediaRecorder(performanceStream, { mimeType: 'video/webm; codecs=vp9' } );
                } else {
                    mR = new MediaRecorder(performanceStream);
                }

                mR.ondataavailable = function(e){
                    performanceData.push(e.data);
                }

                mR.onstop = function(e){
                    console.log(e);
                    console.log(performanceData);
                }

                mR.start(50);

            } else {

                recording = false;
                recordBtn.textContent = "Re-Record Performance";

                if(!isLeadRecording){
                    recordedVideos.pause();
                }

                visualiser.stop();
                mR.stop();

                performanceVideo.dataset.active = "false";

                var blob = new Blob(performanceData, {
                    type: "video/webm"
                });

                try{
                    const vidURL = window.URL.createObjectURL(blob);
                    recordedVideo.src = vidURL;
                } catch(err){

                    console.log('Unable to createObjectURL for stream. Setting srcObject to stream instead...');
                    recordedVideo.srcObject = stream;

                }

                recordedVideo.dataset.active = "true";
                recordedVideo.currentTime = streamOffset / 1000;

                playbackBtn.dataset.active = "true";
                saveBtn.dataset.active = "true";

            }


        }, false);

        playbackBtn.addEventListener('click', function(){

            if(!showingPerformance){
                showingPerformance = true;

                playbackBtn.textContent = "Stop Playback";

                recordedVideo.currentTime = streamOffset / 1000;
                recordedVideo.play()

                if(!isLeadRecording){
                    recordedVideos.play();
                }

            } else {

                showingPerformance = false;

                playbackBtn.textContent = "Replay Performance";

                recordedVideo.pause()
                recordedVideos.pause();

                recordedVideo.currentTime = streamOffset / 1000;

            }

        }, false);

        recordedVideo.addEventListener('ended', function(){

            if(showingPerformance){

                if(!isLeadRecording){

                    if(recordedVideos.finished()){
                        showingPerformance = false;
                        playbackBtn.textContent = "Replay Performance";
                    }

                } else {
                    showingPerformance = false;
                    playbackBtn.textContent = "Replay Performance";
                }

            }

        }, false);

        enableCaptureBtn.addEventListener('click', function(){

            this.classList.add('loading');
            this.classList.add('dark');

            navigator.mediaDevices.enumerateDevices()
                .then( function(listOfDevices){

                    var constraints = { video: true,  audio: {latency : 0.05, echoCancellation : false } } ;

                    if(localStorage.getItem('camera-override')){
                        constraints.video = {
                            deviceId : { exact: localStorage.getItem('camera-override') }
                        }
                    }

                    navigator.mediaDevices.getUserMedia(constraints)
                        .then(function(stream) {
                            
                            console.log(stream);
                            performanceStream = stream;

                            streamWidth = stream.getVideoTracks()[0].getSettings().width;
                            streamHeight = stream.getVideoTracks()[0].getSettings().height;

                            var a = stream.getAudioTracks()[0];
                            reportedOffset = a.getSettings().latency;

                            console.log('Reported offset (seconds):', reportedOffset);
                            
                            try{
                                const vidURL = window.URL.createObjectURL(stream);
                                performanceVideo.src = vidURL;
                            } catch(err){

                                console.log('Unable to createObjectURL for stream. Setting srcObject to stream instead...');
                                performanceVideo.srcObject = stream;

                            }

                            visualiser.configure({
                                element : visualiserElement,
                                src : stream
                            });

                            setTimeout(function(){

                                console.log('Video is playing', !performanceVideo.paused);

                                if(performanceVideo.paused){
                                    performanceVideo.play();

                                    activateCameraDialog.dataset.active = "false";

                                    if(!isLeadRecording){

                                        performanceView.classList.add('inverted');
                                        calibrateInputsDialog.dataset.active = "true";
                                        
                                        if(recordedVideos.ready() && offsetCalibrated){
                                            recordBtn.dataset.active = "true";
                                        }

                                    } else {
                                        recordBtn.dataset.active = "true";
                                        performanceView.dataset.videoloaded = "true";
                                        visualiser.start();
                                    }

                                }

                            }, 1000);

                        })
                    ;

                })
            ;

        }, false);

        calibrateInputsBtn.addEventListener('click', function(){

            this.classList.add('loading');

            offset_analyser.enable("/assets/audio/test_chimes_square.wav");
            offset_analyser.create( { fftSize : 2048 } );
            offset_analyser.src(performanceStream);
            offset_analyser.connect();
            offset_analyser.find(3)
                .then(function(result){

                    offsetCalibrated = true;
                    if(reportedOffset){
                        streamOffset = reportedOffset * 1000;
                    } else if(result){
                        streamOffset = result;
                    }

                    console.log('Detected offset:', result);
                    console.log('Chosen offset:', streamOffset);
                    performanceView.dataset.videoloaded = "true";

                    if(!isLeadRecording){
                        if(recordedVideos.ready() && offsetCalibrated){
                            recordBtn.dataset.active = "true";
                        }
                    }
                    visualiser.start();
                    return result;
                })
                .catch(function(err){
                    console.log('Offset Analyser err:', err);
                    performanceView.dataset.videoloaded = "true";
                })
            ;

        }, false);

        saveBtn.addEventListener('click', function(){

            uploadDialog.dataset.active = "true";

            var recordedVideo = new Blob(performanceData, {
                /*type: "video/webm"*/
            });

            var fd = new FormData();
            fd.append('video', recordedVideo, 'video.webm');
            fd.append('offset', streamOffset / 1000);
            fd.append('width', streamWidth);
            fd.append('height', streamHeight);

            var req = new XMLHttpRequest();
            req.open('POST', '/performance/save/{{this.choirId}}/{{this.songId}}/{{this.partNameId}}');
            req.withCredentials = true;

            req.onload = function() {

                uploadProgressIndicator.parentNode.dataset.active = "false";
                uploadDialog.querySelector('.dialog-content #heading').textContent = "Performance saved!";
                uploadDialog.querySelector('.dialog-content p').textContent = "Your performance has been saved to Choirless. Thanks!";
                uploadDialog.querySelector('#action').dataset.active = "true";

            }

            req.onerror = function(err) {
                // Error
                console.log(err);

                uploadDialog.dataset.active = "false";

                __global_message.display({
                    content : "Could not complete upload to the Choirless service. Please check network connection and try again.",
                    type : "error",
                    resetParameters : true
                });


            }

            req.upload.onprogress = function(e){
                uploadProgressIndicator.style.width = (e.loaded / e.total) * 100 + "%";
            }

            req.send(fd);

        }, false);

        if(!isLeadRecording){

            var leadVideoId = "{{leadVideoIdentifier}}";

            recordedVideos.load(leadVideoId);

        }

        if(moreVideosTrigger){

            moreVideosTrigger.addEventListener('click', function(e){
                
                recordBtn.dataset.active = "false";
                recordedVideos.pause();
                moreVideosTrigger.classList.add('loading');
                moreVideosTrigger.classList.add('dark');
                var performancesListElement = otherPerformancesModal.querySelector('ul#performances-list');

                fetch(`/performance/list-performances/${choirId}/${songId}`)
                    .then(function(res){

                        moreVideosTrigger.classList.remove('loading');
                        moreVideosTrigger.classList.remove('dark');

                        if(res.ok){
                            return res.json();
                        } else {
                            throw res;
                        }

                    })
                    .then(function(data){

                        var sections = data.sections;

                        performancesListElement.innerHTML = "";
                        var listFragment = document.createDocumentFragment();
                        var currentVideos = Array.from(leadView.querySelectorAll('.videoContainer')).map(function(video){
                            return video.dataset.id;
                        });

                        sections.forEach(function(section){

                            // <li class="heading">Lead</li>

                            if(section.recordings.length === 0){
                                return;
                            }

                            var headerLi = document.createElement('li');
                            headerLi.classList.add('heading');
                            headerLi.textContent = section.name;

                            listFragment.appendChild(headerLi);

                            section.recordings.forEach(function(recording){

                                // <li><a>Sean M. Tracey</a><button class="cta-button green">Default</button></li>

                                console.log(recording);
                                var li = document.createElement('li');
                                var a = document.createElement('a');
                                var btn = document.createElement('button');

                                li.dataset.selected = currentVideos.includes(recording.partId).toString();
                                li.dataset.partid = recording.partId;
                                a.textContent = recording.userName;
                                btn.classList.add('cta-button');

                                if(li.dataset.selected === "false"){
                                    btn.textContent = "Select Video";
                                    btn.classList.add('blue');
                                } else {
                                    btn.textContent = "Video Selected";
                                    btn.classList.add('dark-green');
                                }

                                if(recording.partType !== "backing"){

                                    btn.addEventListener('click', function(){

                                        this.parentNode.dataset.selected = this.parentNode.dataset.selected === "true" ? "false"  : "true";

                                        if(this.parentNode.dataset.selected === "true"){
                                            this.textContent = "Video Selected";
                                            this.classList.add('dark-green');
                                            this.classList.remove('blue');
                                        } else {
                                            this.textContent = "Select Video";
                                            this.classList.add('blue');
                                            this.classList.remove('dark-green');
                                        }

                                        this.classList.remove('red');
                                        var numberOfSelectedPerformances = performancesListElement.querySelectorAll('li[data-selected="true"]').length;
                                        selectedPerformancesCountDisplay.textContent = `${numberOfSelectedPerformances}/${MAX_RECORDED_PERFORMANCES}`;

                                        if(numberOfSelectedPerformances === MAX_RECORDED_PERFORMANCES){
                                            
                                            Array.from(performancesListElement.querySelectorAll('li[data-selected="false"] button')).forEach(function(button){
                                                button.dataset.active = "false";
                                            });

                                        } else {

                                            Array.from(performancesListElement.querySelectorAll('li[data-selected="false"] button[data-active="false"]')).forEach(function(button){
                                                button.dataset.active = "true";
                                            });

                                        }

                                    }, false);

                                    btn.addEventListener('mouseenter', function(){

                                        if(this.parentNode.dataset.selected === "true"){
                                            this.textContent = "Remove Video";
                                            this.classList.add('red');
                                            this.classList.remove('dark-green');
                                        }

                                    }, false);

                                    btn.addEventListener('mouseleave', function(){

                                        if(this.parentNode.dataset.selected === "true"){
                                            this.textContent = "Video Selected";
                                            this.classList.add('dark-green');
                                            this.classList.remove('red');
                                        }

                                    }, false);

                                }

                                li.appendChild(a);
                                li.appendChild(btn);

                                listFragment.appendChild(li);
                            
                            });

                        });

                        var numberOfSelectedPerformances = listFragment.querySelectorAll('li[data-selected="true"]').length;
                        if(numberOfSelectedPerformances >= MAX_RECORDED_PERFORMANCES){
                                    
                            Array.from(listFragment.querySelectorAll('li[data-selected="false"] button')).forEach(function(button){
                                button.dataset.active = "false";
                            });

                        } else {

                            Array.from(listFragment.querySelectorAll('li[data-selected="false"] button[data-active="false"]')).forEach(function(button){
                                button.dataset.active = "true";
                            });

                        }

                        performancesListElement.appendChild(listFragment);

                        var closeOtherPerformancesModalButton = otherPerformancesModal.querySelector('button.cancel');
                        var loadOtherPerformancesModalButton = otherPerformancesModal.querySelector('button[type="submit"]');

                        closeOtherPerformancesModalButton.addEventListener('click', function(e){
                            otherPerformancesModal.dataset.active = "false";
                            if(recordedVideos.ready() && offsetCalibrated){
                                recordBtn.dataset.active = "true";
                            }
                        }, {once : true} );

                        loadOtherPerformancesModalButton.addEventListener('click', function(e){

                            var videosToLoad = Array.from(performancesListElement.querySelectorAll('li')).filter(function(li){
                                console.log(li);
                                return li.dataset.selected === "true"
                            }).map(function(li){
                                return li.dataset.partid;
                            });

                            document.body.dataset.performances = "0";
                            
                            Array.from(leadView.querySelectorAll('.videoContainer')).forEach(container => {
                                container.parentNode.removeChild(container);
                            });

                            videosToLoad.forEach(function(partId){

                                if(!leadView.querySelector(`.videoContainer[data-id="${partId}"]`) ){
                                    recordedVideos.load(partId);
                                }

                            });

                            otherPerformancesModal.dataset.active = "false";

                        }, {once : true} );

                        otherPerformancesModal.dataset.active = "true";

                    })
                    .catch(function(err){
                        console.log('list performances err:', err);

                        __global_message.display({
                            content : "Could not get other performances. Please check network connection.",
                            type : "error",
                            resetParameters : true
                        });

                    })
                ;


            }, false);

        }
    }());


</script>