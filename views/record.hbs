<div id="videos" data-leadrecording="{{#ifEquals this.partName "Lead"}}true{{else}}false{{/ifEquals}}">

    {{#ifNotEquals this.partName "Lead"}}

    <div class="half" id="lead" data-videoloaded="false">
        <video preload src="" ></video>

        <div id="lead-loading" class="video-dialog">
            <h2>Loading Lead Video</h2>
            <div class="progress">
                <span class="indicator"></span>
            </div>
        </div>

        <button class="cta-button white" id="otherPerformancesTrigger">See Other Performances</button>

        <h3>Lead</h3>

        <div class="modal" data-active="false">
            <div class="container">
                <div class="content">
                    <h2>See other performances</h2>
                    
                    <ul>
                        <li><a>Sean M. Tracey</a><button class="cta-button blue">Select Video</button></li>
                        <li><a>Sean M. Tracey</a><button class="cta-button blue">Select Video</button></li>
                        <li><a>Sean M. Tracey</a><button class="cta-button blue">Select Video</button></li>
                        <li><a>Sean M. Tracey</a><button class="cta-button blue">Select Video</button></li>
                        <li><a>Sean M. Tracey</a><button class="cta-button blue">Select Video</button></li>
                        <li><a>Sean M. Tracey</a><button class="cta-button blue">Select Video</button></li>
                        <li><a>Sean M. Tracey</a><button class="cta-button blue">Select Video</button></li>
                        <li><a>Sean M. Tracey</a><button class="cta-button blue">Select Video</button></li>
                        <li><a>Sean M. Tracey</a><button class="cta-button blue">Select Video</button></li>
                        <li><a>Sean M. Tracey</a><button class="cta-button blue">Select Video</button></li>
                        <li><a>Sean M. Tracey</a><button class="cta-button blue">Select Video</button></li>

                    </ul>

                    <div class="side-by-side">
                        <button type="button" class="cta-button red cancel">Cancel</button>
                        <button type="submit" class="cta-button light-blue">Load Videos</button>
                    </div>

                </div>
            </div>
        </div>
    </div>

    {{/ifNotEquals}}

    <div class="half inverse" id="performance" data-videoloaded="false">
        <video muted></video>
        <video id="recorded" data-active="false"></video>
        <div id="activate-cameras" class="video-dialog" data-active="true">
            <h2>Camera + Microphone Access</h2>
            <p>To record your performance, you'll need to let Choirless use your camera and microphone.</p>
            <button class="cta-button" id="enableCapture">Enable Camera + Microphone</button>
            <p>(Don't worry, we won't record or save anything until you tell us to).</p>
        </div>

        <div id="calibrate-stream" class="video-dialog" data-active="false">
            <h2>Calibrate Inputs</h2>
            <p>Before we get started, we'd like to calibrate your camera and microphone for the best quality.</p>
            <p><strong>Please remove any headphones you have attached to your device and unmute your speakers.</strong></p>
            <p>When you click the <strong>"Calibrate Inputs"</strong> button below you'll hear a series of tones.</p>
            <p>They'll only play for a few seconds, after which your video will appear and you'll be able to begin recording.</p>
            <button class="cta-button black" id="beginCalibration">Calibrate Inputs</button>
            {{!-- <p>(Don't worry, we won't record or save anything until you tell us to).</p> --}}
        </div>

        <h3>You</h3>
    </div>

</div>

<div id="controls" data-active="true">
    {{#ifNotEquals this.partName "Lead"}}<button class="cta-button listen" data-active="false">Listen To Lead</button>{{/ifNotEquals}}
    <button class="cta-button record" data-active="false">Record Performance</button>
    <button class="cta-button playback" data-active="false">Replay Performance</button>
    <button class="cta-button save"  data-active="false">Save Performance</button>
</div>

<div id="uploadDialog" class="global-dialog" data-active="false">
    <div class="dialog-content">
        <h3 id="heading">Saving performance</h3>
        <p id="message">Sending your performance to the Choirless servers.<br/><br/>Please don't leave this page until the upload has finished.</p>
        <div class="progress inverted" data-active="true">
            <span class="indicator inverted"></span>
        </div>
        <a class="cta-button" id="action" data-active="false" href="/dashboard/choir/{{choirId}}/song/{{songId}}">OK</a>
    </div>
</div>

{{> record/offset_analyser }}

<script>

    (function(){

        'use strict';

        const isLeadRecording = document.querySelector('#videos').dataset.leadrecording === "true";

        var playingLead = false;
        var recording = false;

        var showingPerformance = false;

        var leadView = isLeadRecording ? null : document.querySelector('.half#lead');
        var leadVideo = isLeadRecording ? null : leadView.querySelector('video');
        var downloadProgressIndicator = isLeadRecording ? null : leadView.querySelector('.indicator');
        var moreVideosTrigger = isLeadRecording ? null : leadView.querySelector('button#otherPerformancesTrigger');
        var otherPerformancesModal = isLeadRecording ? null : leadView.querySelector('.modal');

        var performanceView = document.querySelector('.half#performance');;
        var performanceVideo = performanceView.querySelector('video');
        var recordedVideo = performanceView.querySelector('video#recorded');

        var activateCameraDialog = document.querySelector('#activate-cameras');
        var enableCaptureBtn = activateCameraDialog.querySelector('#enableCapture');

        var calibrateInputsDialog = document.querySelector('#calibrate-stream');
        var calibrateInputsBtn = calibrateInputsDialog.querySelector('#beginCalibration');
        var offsetCalibrated = false;
        var streamOffset = 0;

        var listenBtn = isLeadRecording ? null : document.querySelector('#controls button.listen');
        var recordBtn = document.querySelector('#controls button.record');
        var playbackBtn = document.querySelector('#controls button.playback');
        var saveBtn = document.querySelector('#controls button.save');

        var uploadDialog = document.querySelector('#uploadDialog');
        var uploadProgressIndicator = uploadDialog.querySelector('.indicator');

        var performanceData = [];
        var performanceStream;
        var mR;

        function download(chunks) {

            var blob = new Blob(chunks, {
                type: "video/webm"
            });

            var url = URL.createObjectURL(blob);
            var a = document.createElement("a");

            document.body.appendChild(a);

            a.style = "display: none";
            a.href = url;
            a.download = "test.webm";
            a.click();

            window.URL.revokeObjectURL(url);

        }

        window.addEventListener('keyup', function(e){
            console.log(e.keyCode);

            if(e.keyCode === 27 && performanceData.length > 0){
                download(performanceData);
            }

        }, false);

        if(listenBtn){

            listenBtn.addEventListener('click', function(){

                if(!playingLead){
                    playingLead = true;
                    leadVideo.currentTime = 0;
                    leadVideo.play();
                    listenBtn.textContent = "Stop Lead";
                } else {
                    leadVideo.pause();
                    playingLead = false;
                    leadVideo.currentTime = 0;
                    listenBtn.textContent = "Listen To Lead";
                }

            }, false);

        }

        recordBtn.addEventListener('click', function(){

            if(!recording){

                recording = true;

                recordBtn.textContent = "Stop Recording";

                if(listenBtn){
                    listenBtn.dataset.active = "false";
                }

                recordedVideo.dataset.active = "false";
                performanceVideo.dataset.active = "true";
                playbackBtn.dataset.active = "false";
                saveBtn.dataset.active = "false";

                playbackBtn.textContent = "Replay Performance";
                playingLead = false;
                showingPerformance = false;

                performanceData.length = 0;

                recordedVideo.pause();
                recordedVideo.src = "";

                if(!isLeadRecording){
                    leadVideo.currentTime = 0;
                    leadVideo.play();
                }

                // Oh Firefox, why you gotta do me like this?
                if(navigator.userAgent.indexOf("Firefox") === -1){
                    mR = new MediaRecorder(performanceStream, { mimeType: 'video/webm; codecs=vp9' } );
                } else {
                    mR = new MediaRecorder(performanceStream);
                }

                mR.ondataavailable = function(e){
                    performanceData.push(e.data);
                }

                mR.onstop = function(e){
                    console.log(e);
                    console.log(performanceData);
                }

                mR.start(50);

            } else {

                recording = false;
                recordBtn.textContent = "Re-Record Performance";

                if(!isLeadRecording){
                    leadVideo.pause();
                    leadVideo.currentTime = 0;
                }

                mR.stop();

                performanceVideo.dataset.active = "false";

                var blob = new Blob(performanceData, {
                    type: "video/webm"
                });

                try{
                    const vidURL = window.URL.createObjectURL(blob);
                    recordedVideo.src = vidURL;
                } catch(err){

                    console.log('Unable to createObjectURL for stream. Setting srcObject to stream instead...');
                    recordedVideo.srcObject = stream;

                }

                recordedVideo.dataset.active = "true";
                recordedVideo.currentTime = 0;

                playbackBtn.dataset.active = "true";
                saveBtn.dataset.active = "true";

            }


        }, false);

        playbackBtn.addEventListener('click', function(){

            if(!showingPerformance){
                showingPerformance = true;

                playbackBtn.textContent = "Stop Playback";

                recordedVideo.currentTime = streamOffset / 1000;
                recordedVideo.play()

                if(!isLeadRecording){
                    leadVideo.currentTime = 0;
                    leadVideo.play();
                }

            } else {

                showingPerformance = false;

                playbackBtn.textContent = "Replay Performance";

                recordedVideo.pause()
                leadVideo.pause();

                recordedVideo.currentTime = 0;
                if(!isLeadRecording){
                    leadVideo.currentTime = 0;
                }

            }

        }, false);

        if(!isLeadRecording){

            leadVideo.addEventListener('ended', function(){
                playingLead = false;
                leadVideo.currentTime = 0;
                listenBtn.textContent = "Listen to lead";

                if(showingPerformance && recordedVideo.paused === true){
                    showingPerformance = false;
                    playbackBtn.textContent = "Replay Performance";
                }

            }, false);

        }

        recordedVideo.addEventListener('ended', function(){

            if(showingPerformance){

                if(!isLeadRecording){

                    if(leadVideo.paused === true){
                        showingPerformance = false;
                        playbackBtn.textContent = "Replay Performance";
                    }

                } else {
                    showingPerformance = false;
                    playbackBtn.textContent = "Replay Performance";
                }

            }

        }, false);

        enableCaptureBtn.addEventListener('click', function(){

            this.classList.add('loading');
            this.classList.add('dark');

            navigator.mediaDevices.enumerateDevices()
                .then( function(listOfDevices){

                    var constraints = { video: true,  audio: true };

                    navigator.mediaDevices.getUserMedia(constraints)
                        .then(function(stream) {

                            performanceStream = stream;

                            try{
                                const vidURL = window.URL.createObjectURL(stream);
                                performanceVideo.src = vidURL;
                            } catch(err){

                                console.log('Unable to createObjectURL for stream. Setting srcObject to stream instead...');
                                performanceVideo.srcObject = stream;

                            }

                            setTimeout(function(){

                                console.log('Video is playing', !performanceVideo.paused);

                                if(performanceVideo.paused){
                                    performanceVideo.play();

                                    activateCameraDialog.dataset.active = "false";

                                    if(!isLeadRecording){

                                        performanceView.classList.add('inverted');
                                        calibrateInputsDialog.dataset.active = "true";

                                        if(leadVideo.readyState === 4 && offsetCalibrated){
                                            recordBtn.dataset.active = "true";
                                        }

                                    } else {
                                        recordBtn.dataset.active = "true";
                                        performanceView.dataset.videoloaded = "true";

                                    }

                                }

                            }, 1000);

                        })
                    ;

                })
            ;

        }, false);

        calibrateInputsBtn.addEventListener('click', function(){

            this.classList.add('loading');

            offset_analyser.enable("/assets/audio/test_chimes.wav");
            offset_analyser.create( { fftSize : 2048 } );
            offset_analyser.src(performanceStream);
            offset_analyser.connect();
            offset_analyser.find(3)
                .then(function(result){
                    
                    offsetCalibrated = true;

                    if(result){
                        streamOffset = result;
                    }

                    console.log(result);
                    performanceView.dataset.videoloaded = "true";

                    if(!isLeadRecording){
                        if(leadVideo.readyState === 4){
                            recordBtn.dataset.active = "true";
                        }
                    }

                    return result;
                })
                .catch(function(err){
                    console.log('Offset Analyser err:', err);
                    performanceView.dataset.videoloaded = "true";
                })
            ;

        }, false);

        saveBtn.addEventListener('click', function(){

            uploadDialog.dataset.active = "true";

            var recordedVideo = new Blob(performanceData, {
                /*type: "video/webm"*/
            });

            var fd = new FormData();
            fd.append('video', recordedVideo, 'video.webm');
            fd.append('offset', streamOffset / 1000);
            
            var req = new XMLHttpRequest();
            req.open('POST', '/performance/save/{{this.choirId}}/{{this.songId}}/{{this.partNameId}}');
            req.withCredentials = true;
            
            req.onload = function() {

                uploadProgressIndicator.parentNode.dataset.active = "false";
                uploadDialog.querySelector('.dialog-content #heading').textContent = "Performance saved!";
                uploadDialog.querySelector('.dialog-content p').textContent = "Your performance has been saved to Choirless. Thanks!";
                uploadDialog.querySelector('#action').dataset.active = "true";

            }

            req.onerror = function(err) {
                // Error
                console.log(err);
            }

            req.upload.onprogress = function(e){
                uploadProgressIndicator.style.width = (e.loaded / e.total) * 100 + "%";
            }

            req.send(fd);

        }, false);

        if(!isLeadRecording){

            var leadVideoAddr = "/performance/video/{{leadVideoIdentifier}}.webm";
            var videoSize = 0;
            fetch(leadVideoAddr, {
                    method : "HEAD"
                })
                .then(function(res){
                    if(res.ok){
                        return Number(res.headers.get('Content-Length'));
                    }
                })
                .then(function(sizeOfFile){

                    var req = new XMLHttpRequest();
                    req.open('GET', leadVideoAddr, true);
                    req.withCredentials = true;
                    req.responseType = 'blob';

                    req.onload = function() {

                        if (this.status === 200) {
                            leadVideo.src = window.URL.createObjectURL(this.response);
                            leadView.dataset.videoloaded = "true";
                            listenBtn.dataset.active = "true";

                            if(performanceVideo.readyState === 4){
                                recordBtn.dataset.active = "true";
                            }

                        }

                    }

                    req.onerror = function(err) {
                        // Error
                        console.log(err);
                    }

                    req.onprogress = function(e){
                        console.log(e);
                        downloadProgressIndicator.style.width = (e.loaded / sizeOfFile) * 100 + "%";
                    }

                    req.send();

                })
                .catch(function(err){

                    console.log('fetch HEAD err:', err);

                })

            ;

        }

        moreVideosTrigger.addEventListener('click', function(e){
            console.log('click');

            var closeOtherPerformancesModalButton = otherPerformancesModal.querySelector('button.cancel');

            closeOtherPerformancesModalButton.addEventListener('click', function(e){
                otherPerformancesModal.dataset.active = "false";    
            }, {once : true} );
            otherPerformancesModal.dataset.active = "true";

        }, false);

    }());


</script>